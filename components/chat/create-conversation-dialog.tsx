"use client";

import {
  Plus,
  MessageCircle,
  Users,
  Hash,
  Loader2,
  Search,
  X,
  AlertCircle,
} from "lucide-react";
import { useState, useEffect, useMemo, useCallback } from "react";

import { createConversation } from "@/actions/chat/create-conversation";
import { findExistingDirectConversation } from "@/actions/chat/find-existing-conversation";
import { getAvailableUsers } from "@/actions/chat/get-available-users";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface User {
  id: string;
  name: string | null;
  email: string | null;
  avatar: string | null;
}

interface CreateConversationDialogProps {
  onConversationCreated?: (conversationId: string) => void;
  currentUserId: string;
  trigger?: React.ReactNode;
}

export function CreateConversationDialog({
  onConversationCreated,
  currentUserId,
  trigger,
}: CreateConversationDialogProps) {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [loadingUsers, setLoadingUsers] = useState(false);
  const [type, setType] = useState<"DIRECT" | "GROUP" | "CHANNEL">("DIRECT");
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [availableUsers, setAvailableUsers] = useState<User[]>([]);
  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [error, setError] = useState<string | null>(null);

  // Load users when dialog opens
  useEffect(() => {
    if (open) {
      loadUsers();
    }
  }, [open]);

  const loadUsers = async () => {
    setLoadingUsers(true);
    try {
      const users = await getAvailableUsers();
      // Filter out current user from available users
      setAvailableUsers(users.filter((user) => user.id !== currentUserId));
    } catch (error) {
      console.error("Error loading users:", error);
    } finally {
      setLoadingUsers(false);
    }
  };

  const filteredUsers = availableUsers.filter((user) => {
    if (!searchQuery) return true;
    const query = searchQuery.toLowerCase();
    return (
      user.name?.toLowerCase().includes(query) ||
      user.email?.toLowerCase().includes(query)
    );
  });

  const handleUserSelection = useCallback(
    (userId: string, checked: boolean) => {
      if (checked) {
        // For direct messages, only allow one participant
        if (type === "DIRECT") {
          setSelectedUserIds([userId]);
        } else {
          setSelectedUserIds((prev) => [...prev, userId]);
        }
      } else {
        setSelectedUserIds((prev) => prev.filter((id) => id !== userId));
      }
    },
    [type]
  );

  // Memoize auto name generation to prevent infinite re-renders
  const autoGeneratedName = useMemo(() => {
    const selectedUsers = availableUsers.filter((user) =>
      selectedUserIds.includes(user.id)
    );
    const names = selectedUsers.map(
      (user) => user.name || user.email?.split("@")[0] || "Unknown"
    );

    // Create name from participants
    let autoName = names.join(", ");

    // Truncate if too long (industry standard is usually around 50-60 chars)
    const maxLength = 50;
    if (autoName.length > maxLength) {
      autoName = autoName.substring(0, maxLength - 3) + "...";
    }

    return autoName;
  }, [availableUsers, selectedUserIds]);

  // Generate auto name for group/channel if no name provided
  const generateAutoName = useCallback((): string => {
    return autoGeneratedName;
  }, [autoGeneratedName]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (loading) return;

    setError(null);

    // Validation
    if (selectedUserIds.length === 0) {
      setError("Please select at least one participant");
      return;
    }

    if (type === "DIRECT" && selectedUserIds.length > 1) {
      setError("Direct messages can only have one other participant");
      return;
    }

    if ((type === "GROUP" || type === "CHANNEL") && !name.trim()) {
      // Use auto-generated name if no name provided
      const autoName = generateAutoName();
      if (!autoName) {
        setError(
          `Please provide a name for the ${type.toLowerCase()} or select participants`
        );
        return;
      }
    }

    setLoading(true);
    try {
      // For direct messages, check if conversation already exists
      if (type === "DIRECT" && selectedUserIds.length === 1) {
        const existingResult = await findExistingDirectConversation(
          selectedUserIds[0]
        );
        if (existingResult.success && existingResult.data?.conversationId) {
          // Navigate to existing conversation
          onConversationCreated?.(existingResult.data.conversationId);
          setOpen(false);
          setName("");
          setDescription("");
          setSelectedUserIds([]);
          setSearchQuery("");
          setType("DIRECT");
          setError(null);
          return;
        }
      }

      // Use provided name or auto-generated name
      const conversationName =
        name.trim() || (type !== "DIRECT" ? generateAutoName() : undefined);

      const result = await createConversation({
        type,
        name: conversationName,
        description: description || undefined,
        participantIds: selectedUserIds,
      });

      if (result.success && (result.data as any)?.data?.conversationId) {
        const conversationId = (result.data as any).data.conversationId;
        onConversationCreated?.(conversationId);

        // Reset form
        setOpen(false);
        setName("");
        setDescription("");
        setSelectedUserIds([]);
        setSearchQuery("");
        setType("DIRECT");
        setError(null);
      } else {
        const errorMessage = !result.success && typeof (result as { error?: string }).error === "string"
          ? (result as { error: string }).error
          : "Failed to create conversation";
        console.error("Failed to create conversation:", errorMessage);
        setError(errorMessage);
      }
    } catch (error) {
      console.error("Error creating conversation:", error);
      setError("Error creating conversation");
    } finally {
      setLoading(false);
    }
  };

  const getIcon = () => {
    switch (type) {
      case "DIRECT":
        return <MessageCircle className="h-4 w-4" />;
      case "GROUP":
        return <Users className="h-4 w-4" />;
      case "CHANNEL":
        return <Hash className="h-4 w-4" />;
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button variant="outline" size="sm" className="gap-2">
            <Plus className="h-4 w-4" />
            New Conversation
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            {getIcon()}
            Create New Conversation
          </DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div>
            <Label htmlFor="type">Conversation Type</Label>
            <Select value={type} onValueChange={(value: "DIRECT" | "GROUP" | "CHANNEL") => setType(value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select conversation type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="DIRECT">
                  <div className="flex items-center gap-2">
                    <MessageCircle className="h-4 w-4" />
                    Direct Message
                  </div>
                </SelectItem>
                <SelectItem value="GROUP">
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4" />
                    Group Chat
                  </div>
                </SelectItem>
                <SelectItem value="CHANNEL">
                  <div className="flex items-center gap-2">
                    <Hash className="h-4 w-4" />
                    Channel
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          {type !== "DIRECT" && (
            <div>
              <Label htmlFor="name">
                Name
                <span className="text-xs text-muted-foreground ml-1">
                  (optional - will use participant names if empty)
                </span>
              </Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder={
                  selectedUserIds.length > 0
                    ? `e.g., "${autoGeneratedName}"`
                    : `Enter ${type.toLowerCase()} name`
                }
              />
            </div>
          )}

          <div>
            <Label htmlFor="description">Description</Label>
            <Input
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Optional description"
            />
          </div>

          <div>
            <Label>Participants</Label>
            {type === "DIRECT" && (
              <p className="text-xs text-muted-foreground mb-2">
                If a conversation already exists, you'll be taken to it.
              </p>
            )}
            <div className="space-y-3">
              {/* Search */}
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                <Input
                  placeholder="Search users..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>

              {/* Selected users */}
              {selectedUserIds.length > 0 && (
                <div className="space-y-2">
                  <Label className="text-sm text-muted-foreground">
                    Selected:
                  </Label>
                  <div className="flex flex-wrap gap-2">
                    {selectedUserIds.map((userId) => {
                      const user = availableUsers.find((u) => u.id === userId);
                      return (
                        <Badge
                          key={userId}
                          variant="secondary"
                          className="gap-1"
                        >
                          {user?.name || user?.email || userId}
                          <button
                            type="button"
                            onClick={() => handleUserSelection(userId, false)}
                            className="ml-1 hover:bg-destructive hover:text-destructive-foreground rounded-full"
                          >
                            <X className="h-3 w-3" />
                          </button>
                        </Badge>
                      );
                    })}
                  </div>
                </div>
              )}

              {/* User list */}
              <ScrollArea className="h-48 border rounded-md">
                {loadingUsers ? (
                  <div className="flex items-center justify-center p-4">
                    <Loader2 className="h-4 w-4 animate-spin" />
                    <span className="ml-2">Loading users...</span>
                  </div>
                ) : filteredUsers.length === 0 ? (
                  <div className="p-4 text-center text-muted-foreground">
                    {searchQuery ? "No users found" : "No users available"}
                  </div>
                ) : (
                  <div className="p-2 space-y-1">
                    {filteredUsers.map((user) => {
                      const isSelected = selectedUserIds.includes(user.id);

                      return (
                        <div
                          key={user.id}
                          className="flex items-center space-x-3 p-2 rounded hover:bg-muted cursor-pointer"
                          onClick={() =>
                            handleUserSelection(user.id, !isSelected)
                          }
                        >
                          <div onClick={(e) => e.stopPropagation()}>
                            <Checkbox
                              checked={isSelected}
                              onCheckedChange={(checked) =>
                                handleUserSelection(user.id, checked === true)
                              }
                            />
                          </div>
                          <Avatar className="h-8 w-8">
                            <AvatarImage src={user.avatar || undefined} />
                            <AvatarFallback>
                              {user.name?.[0]?.toUpperCase() ||
                                user.email?.[0]?.toUpperCase() ||
                                "?"}
                            </AvatarFallback>
                          </Avatar>
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium truncate">
                              {user.name || "Unknown"}
                            </p>
                            <p className="text-xs text-muted-foreground truncate">
                              {user.email}
                            </p>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                )}
              </ScrollArea>
            </div>
          </div>

          <div className="flex justify-end gap-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setOpen(false)}
              disabled={loading}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={loading || selectedUserIds.length === 0}
            >
              {loading ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                  {type === "DIRECT" ? "Checking..." : "Creating..."}
                </>
              ) : (
                `Create ${type === "DIRECT"
                  ? "Conversation"
                  : type.charAt(0) + type.slice(1).toLowerCase()
                }`
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
