---
globs: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "tests/**/*"]
alwaysApply: false
---
# Testing Guidelines

## Test File Conventions

### Unit & Integration Tests (*.test.ts, *.test.tsx)
- **Framework**: Vitest + React Testing Library
- **Location**: Co-located with source files being tested
- **Purpose**: Test individual components, functions, and integration workflows
- **Examples**: 
  - `lib/validation/user.test.ts` (co-located with `user.ts`)
  - `actions/doc/create-doc.test.ts` (co-located with `create-doc.ts`)
  - `tests/integration/user-profile-update.test.tsx` (complex workflows)

### End-to-End Tests (*.spec.ts)
- **Framework**: Playwright
- **Location**: `tests/e2e/` folder
- **Purpose**: Test complete user workflows in real browser environment
- **Examples**:
  - `tests/e2e/auth-login.spec.ts`
  - `tests/e2e/dashboard-navigation.spec.ts`
  - `tests/e2e/auth-accessibility.spec.ts`

## Testing Best Practices

### Unit/Integration Tests
- Use descriptive test names and clear assertions
- Mock external dependencies (database, APIs)
- Test both happy path and error scenarios
- Focus on user interactions and behavior, not implementation
- Use proper async testing patterns for server actions
- Test form submissions and validation thoroughly

### End-to-End Tests
- Test critical user journeys and workflows
- Include accessibility testing with WCAG compliance
- Test responsive design and mobile functionality
- Validate complete auth flows and permissions
- Test database operations and data integrity

### Test Organization
- Keep tests simple, reliable, and maintainable
- Use proper test data and fixtures
- Implement proper setup and teardown
- Maintain test data separate from production data
- Use custom render functions with providers for component tests

