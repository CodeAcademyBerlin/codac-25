generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials authentication

  // Student Profile fields
  bio            String? // User bio
  avatar         String? // User avatar URL or base64 data
  role           UserRole   @default(STUDENT)
  status         UserStatus @default(ACTIVE)
  cohortId       String?
  cohort         Cohort?    @relation(fields: [cohortId], references: [id])
  startDate      DateTime? // Course start date (for STUDENT users)
  endDate        DateTime? // Course end date (replaces graduationDate for STUDENT users)
  linkedinUrl    String?
  githubUrl      String?
  portfolioUrl   String?
  currentJob     String?
  currentCompany String?
  location       String?
  expertise      Json? // Array of expertise areas
  yearsExp       Int? // Years of professional experience

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth Relations
  accounts Account[]
  sessions Session[]


  achievements UserAchievement[]
  quizResults  QuizResult[]

  // Community Relations
  posts             CommunityPost[]
  comments          Comment[]
  likes             Like[]
  mentorships       Mentorship[]    @relation("Mentor")
  menteeMentorships Mentorship[]    @relation("Mentee")

  // Document Relations removed

  // Job Relations
  postedJobs      Job[]            @relation("PostedJobs")
  jobApplications JobApplication[] @relation("JobApplications")


  // Project Relations
  projectProfile    ProjectProfile?
  projectComments   ProjectComment[]
  projectLikes      ProjectLike[]
  projectCollaborations ProjectCollaborator[]

  // Chat Relations
  chatMessages      ChatMessage[]            @relation("UserChatMessages")
  conversations     ConversationParticipant[] @relation("UserConversations")

  // Notification Relations
  notifications            Notification[]
  notificationPreferences  NotificationPreference?
  // Attendance Relations (only for STUDENT users)
  attendanceRecords        Attendance[]


  @@map("users")
}

model UserImage {
  id          String  @id @default(cuid())
  userId      String
  data        Bytes?
  contentType String?
  hash        String?

  @@index([userId], map: "IX_UserImage_userId")
}

model Cohort {
  id          String    @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime? // Course end date (optional for migration)
  description String?
  image       String?
  avatar      String? // Cohort avatar URL or base64 data
  slug        String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students          User[]
  attendanceRecords Attendance[]

  @@map("cohorts")
}







// Community Features
model CommunityPost {
  id          String   @id @default(cuid())
  title       String
  content     Json // Rich content
  type        PostType @default(DISCUSSION)
  isPublished Boolean  @default(true)
  isPinned    Boolean  @default(false)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  comments Comment[]
  likes    Like[]
  tags     PostTag[]

  @@map("community_posts")
}

model Comment {
  id      String @id @default(cuid())
  content Json // Rich content

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Polymorphic relations
  postId String?
  post   CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)

  // documentId and document relation removed

  parentId String?
  parent   Comment?  @relation("CommentThread", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentThread")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String?
  post   CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

// Mentorship System
model Mentorship {
  id      String           @id @default(cuid())
  status  MentorshipStatus @default(PENDING)
  message String?

  mentorId String
  menteeId String
  mentor   User   @relation("Mentor", fields: [mentorId], references: [id], onDelete: Cascade)
  mentee   User   @relation("Mentee", fields: [menteeId], references: [id], onDelete: Cascade)

  createdAt  DateTime  @default(now())
  acceptedAt DateTime?
  endedAt    DateTime?

  // Add sessions relation
  sessions MentorSession[]

  @@unique([mentorId, menteeId])
  @@map("mentorships")
}

// Mentor Session Booking Model
model MentorSession {
  id           String              @id @default(cuid())
  status       MentorSessionStatus @default(PENDING)
  scheduledFor DateTime
  completedAt  DateTime?
  notes        String?
  feedback     String?

  // Relation to mentorship
  mentorshipId String
  mentorship   Mentorship @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mentor_sessions")
}

// Gamification & Achievements
model Achievement {
  id          String          @id @default(cuid())
  title       String
  description String
  icon        String
  type        AchievementType
  condition   Json // Conditions to unlock
  points      Int             @default(0)

  createdAt DateTime @default(now())

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id         String   @id @default(cuid())
  unlockedAt DateTime @default(now())

  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}





// Supporting Models


model PostTag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#3B82F6")

  posts CommunityPost[]

  @@map("post_tags")
}

// Document functionality removed

// Project Showcase Models
model ProjectProfile {
  id          String  @id @default(cuid())
  bio         String?
  headline    String? // Professional headline/tagline
  location    String?
  website     String?
  resume      String? // URL to resume/CV
  theme       String  @default("default") // Project profile theme/template
  isPublic    Boolean @default(true)
  isActive    Boolean @default(true)
  viewCount   Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects Project[]
  skills   ProjectSkill[]
  experiences Experience[]

  @@map("project_profiles")
}


model Skill {
  id          String @id @default(cuid())
  name        String @unique
  category    String // e.g., "Frontend", "Backend", "Database", "DevOps"
  icon        String? // Icon name or URL
  color       String @default("#3B82F6") // Display color

  createdAt DateTime @default(now())

  // Relations
  projectSkills ProjectSkill[]

  @@map("skills")
}

model ProjectSkill {
  id          String     @id @default(cuid())
  proficiency SkillLevel @default(INTERMEDIATE)
  yearsExp    Int? // Years of experience
  isHighlight Boolean    @default(false) // Featured skill

  projectProfileId String
  skillId          String
  projectProfile   ProjectProfile @relation(fields: [projectProfileId], references: [id], onDelete: Cascade)
  skill            Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([projectProfileId, skillId])
  @@map("project_skills")
}

model Experience {
  id          String         @id @default(cuid())
  type        ExperienceType
  title       String // Job title or degree
  company     String // Company name or institution
  location    String?
  description String?
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean        @default(false)

  projectProfileId String
  projectProfile   ProjectProfile @relation(fields: [projectProfileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("experiences")
}


model Project {
  id            String   @id @default(cuid())
  title         String
  description   String
  summary       Json? // Rich Plate.js content for detailed project summary
  shortDesc     String? // Brief description for cards
  images        Json? // Array of image URLs
  demoUrl       String? // Live demo URL
  githubUrl     String? // Repository URL
  techStack     Json // Array of technologies used
  features      Json? // Array of key features
  challenges    String? // Challenges faced during development
  solutions     String? // Solutions implemented
  status        ProjectStatus @default(COMPLETED)
  startDate     DateTime?
  endDate       DateTime?
  isFeatured    Boolean @default(false)
  isPublic      Boolean @default(true)
  likes         Int     @default(0)
  views         Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectProfileId String
  projectProfile   ProjectProfile @relation(fields: [projectProfileId], references: [id], onDelete: Cascade)
  comments    ProjectComment[]
  projectLikes ProjectLike[]
  collaborators ProjectCollaborator[]

  @@map("projects")
}


model ProjectComment {
  id      String @id @default(cuid())
  content String

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  parentId String?
  parent   ProjectComment?  @relation("ProjectCommentThread", fields: [parentId], references: [id])
  replies  ProjectComment[] @relation("ProjectCommentThread")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project_comments")
}

model ProjectLike {
  id String @id @default(cuid())

  userId    String
  projectId String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
  @@map("project_likes")
}

model ProjectCollaborator {
  id   String @id @default(cuid())
  role String @default("Contributor") // Role in the project

  userId    String
  projectId String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
  @@map("project_collaborators")
}

// Enums
enum UserRole {
  STUDENT
  ALUMNI
  MENTOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum CourseCategory {
  WEB_DEVELOPMENT
  DATA_SCIENCE
  UX_UI_DESIGN
  DIGITAL_MARKETING
  CAREER_DEVELOPMENT
  SOFT_SKILLS
}

enum LessonType {
  TEXT
  VIDEO
  INTERACTIVE
  QUIZ
  EXERCISE
}

enum AssignmentType {
  PROJECT
  QUIZ
  EXERCISE
  PRESENTATION
  PEER_REVIEW
}

enum LessonProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  RETURNED
}

enum PostType {
  DISCUSSION
  QUESTION
  SHOWCASE
  JOB_POSTING
  EVENT
  ANNOUNCEMENT
}

enum MentorshipStatus {
  PENDING
  ACTIVE
  COMPLETED
  DECLINED
}

enum MentorSessionStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  DECLINED
}

enum AchievementType {
  COURSE_COMPLETION
  STREAK
  PARTICIPATION
  SKILL_MASTERY
  COMMUNITY_CONTRIBUTION
}

enum ResourceType {
  LINK
  FILE
  VIDEO
}

// Document-related enums removed

// Job Board Models
model Job {
  id          String    @id @default(cuid())
  title       String
  description String
  company     String
  location    String?
  type        JobType   @default(FULL_TIME)
  level       JobLevel  @default(ENTRY)
  salary      String?
  remote      Boolean   @default(false)
  skills      Json? // Array of required skills
  benefits    Json? // Array of benefits
  applyUrl    String?
  applyEmail  String?
  isActive    Boolean   @default(true)
  featured    Boolean   @default(false)
  expiresAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postedById   String?
  postedBy     User?            @relation("PostedJobs", fields: [postedById], references: [id], onDelete: SetNull)
  applications JobApplication[]

  @@map("jobs")
}



model JobApplication {
  id          String               @id @default(cuid())
  coverLetter String?
  resume      String? // URL or file path
  status      JobApplicationStatus @default(PENDING)
  appliedAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // Relations
  jobId  String
  userId String
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user   User   @relation("JobApplications", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
  @@map("job_applications")
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum JobLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum JobApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  REJECTED
  ACCEPTED
}

model Quiz {
  id         String     @id @default(cuid())
  topic      String
  difficulty String
  quizTitle  String
  questions  Question[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  quizResults QuizResult[]
}

model Question {
  id            String   @id @default(cuid())
  text          String
  options       String // Stored as a JSON string
  correctAnswer String
  explanation   String?
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model QuizResult {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Int
  total     Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

// New Portfolio-related Enums
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  PAUSED
  ARCHIVED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ExperienceType {
  WORK
  EDUCATION
  VOLUNTEER
  PROJECT
  INTERNSHIP
}

model Attendance {
  id     String           @id @default(cuid())
  date   DateTime         @db.Date
  status AttendanceStatus

  // Relations
  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  cohortId  String
  cohort    Cohort @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date]) // One attendance record per student per day
  @@map("attendance")
}

enum AttendanceStatus {
  PRESENT
  ABSENT_SICK
  ABSENT_EXCUSED
  ABSENT_UNEXCUSED
}



// Chat System Models
enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
}

model ChatMessage {
  id             String   @id @default(cuid())
  content        String
  userName       String?
  userId         String
  conversationId String
  roomName       String? // For backward compatibility
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation("UserChatMessages", fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Conversation {
  id          String           @id @default(cuid())
  name        String?
  description String?
  type        ConversationType @default(DIRECT)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  participants ConversationParticipant[]
  messages     ChatMessage[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  lastSeenAt     DateTime?

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}


// Chat Notification System Models
model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?    // Store additional context like messageId, conversationId, etc.
  
  // Recipient
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Optional: Link to specific entities
  messageId       String?
  conversationId  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  readAt    DateTime?
  
  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification channels
  inApp     Boolean @default(true)
  email     Boolean @default(true)
  push      Boolean @default(false)
  
  // Notification types
  directMessages  Boolean @default(true)
  groupMessages   Boolean @default(true)
  channelMessages Boolean @default(true)
  mentions        Boolean @default(true)
  
  // Timing preferences
  quietHoursStart String? // Format: "22:00"
  quietHoursEnd   String? // Format: "08:00"
  timezone        String? // User's timezone
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId])
  @@map("notification_preferences")
}

// Add this enum
enum NotificationType {
  DIRECT_MESSAGE
  GROUP_MESSAGE
  CHANNEL_MESSAGE
  MENTION
  CONVERSATION_INVITE
  SYSTEM
}
